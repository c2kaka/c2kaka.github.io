<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欧阳帆</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-08T15:06:46.145Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>kaka</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP常用标签</title>
    <link href="http://yoursite.com/2019/05/08/HTTP%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2019/05/08/HTTP常用标签/</id>
    <published>2019-05-08T15:03:57.000Z</published>
    <updated>2019-05-08T15:06:46.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h1><h2 id="HTML-常用标签"><a href="#HTML-常用标签" class="headerlink" title="HTML 常用标签"></a>HTML 常用标签</h2><h3 id="iframe标签"><a href="#iframe标签" class="headerlink" title="iframe标签"></a>iframe标签</h3><p><strong>HTML内联框架元素 <iframe></iframe></strong> 表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中。</p><p><strong>属性</strong></p><p><strong>frameborder</strong> </p><p>取值为1时（默认值），告诉浏览器在当前iframe与其他iframe之间绘制边框，取0时则无需绘制此边框。默认的比较丑，一般取0。</p><p><strong>height</strong></p><p>以CSS像素格式指定frame的高度。</p><p><strong>width</strong></p><p>以CSS像素格式或以百分比格式指定frame的宽度。</p><p><strong>name</strong></p><p>嵌入的浏览上下文（框架）的名称。该名称可以用作标签<a>，<form>的<code>target</code>属性值，或者标签<input>,<button>的<code>formtaget</code>属性值。</button></form></a></p><p><strong>src</strong></p><p>嵌套页面的URL地址。使用遵守同源策略的  <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#Inherited_origins" target="_blank" rel="noopener">‘about:blank’</a> 来嵌套空白页。</p><hr><h3 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h3><p><strong>HTML</strong>  元素  (或锚元素) 可以创建一个到其他网页、文件、同一页面内的位置、电子邮件地址或任何其他URL的超链接。</p><p><strong>属性</strong></p><p><strong>download</strong></p><p>此属性指示浏览器下载URL或者文件而不是导航到它，因此将提示用户将其保存为本地文件。<strong>此属性仅使用于**</strong>同源URL**, 如果不是同源(同域), 将会导航到该URL, 例如:</p><ul><li><p><code>&lt;a href=&quot;http://127.0.0.1:8080/index.html&quot; download=&quot;index&quot;&gt;下载&lt;/a&gt;</code> 会下载同源的一个index.html</p></li><li><p><code>&lt;a href=&quot;http://qq.com&quot; download=&quot;qq&quot;&gt;下载&lt;/a&gt;</code>, <code>download</code>无效, 将导航到qq.com</p><p><code>target</code>: 该属性指定在何处显示链接的资源。 取值为标签（tab），窗口（window），或框架（iframe）等浏览上下文的名称或其他关键词。</p></li><li><p><code>target=&quot;_self&quot;</code>: 当前页面加载, 如果没有指定此属性的话, 该值是默认值.</p></li><li><p><code>target=&quot;_blank&quot;</code>: 新窗口打开</p></li><li><p><code>target=&quot;_parent&quot;</code>: 会加载到当前页面的父页面, 如果没有父页面,则等同于<code>_self</code></p></li><li><p><code>targe=&quot;_top&quot;</code>: 会加载到最顶层页面, 祖先级页面, 当index1.html包含index2.html, index2.html包含index3.html, 则index3.html中的跳转则会加载到index1.html上</p></li></ul><p><strong>href</strong></p><p>包含超链接指向的URL或URL片段。</p><ul><li><code>&lt;a href=&quot;qq.com&quot;&gt;QQ&lt;/a&gt;</code>:,点击QQ不会跳转到qq.com 会把qq.com当成文件, <strong>不是以.com为后缀就是网址,也可以是文件</strong></li><li><code>&lt;a href=&quot;//qq.com&quot;&gt;QQ&lt;/a&gt;</code>, 不写协议的时候, 无协议绝对地址, 默认是当前页面协议, 是file协议, 就跳转file://qq.com, 是HTTP协议, 就跳转到<a href="http://qq.com" target="_blank" rel="noopener">http://qq.com</a></li><li><code>&lt;a href=&quot;xxx.html&quot;&gt;xxx&lt;/a&gt;</code>, 相对路径, 路径只会以目录为参考, 如果在index.html中跳转, 并不会以index.html为前缀<code>index.html/xxx.html</code>, 会显示<code>xxx.html</code></li><li><code>&lt;a href=&quot;#1&quot;&gt;1ink&lt;/a&gt;</code>, 写锚点, 会自动加到后面, 不会发起请求, <code>index.html#1</code>, 虽然不会发起请求,但是页面会有变化.</li><li><code>&lt;a href=&quot;?name=xxx&quot;&gt;query&lt;/a&gt;</code>, 写参数, 会自动加到后面, 并发起GET请求, <code>index.html?name=xxx</code></li><li><code>&lt;a href=&quot;javascript: alert(1)&quot;&gt;js&lt;/a&gt;</code>, 伪协议, 会执行js代码.</li><li><code>&lt;a href=&quot;javascript:;&quot;&gt;js&lt;/a&gt;</code>, 伪协议, 使其标签点击而不做任何动作，可以实现某些奇葩需求</li><li><code>&lt;a href=&quot;&quot;&gt;blank&lt;/a&gt;</code>, 什么也不写, 页面会刷新, 跳转到了自己.</li></ul><p><strong>name</strong></p><p>和iframe配合使用</p><hr><h3 id="form标签"><a href="#form标签" class="headerlink" title="form标签"></a>form标签</h3><p><strong>HTML</strong>元素</p><p>表示了文档中的一个区域，这个区域包含有交互控制元件，用来向web服务器提交信息。</p><blockquote><p><strong>a标签和form标签都是跳转, 区别就是a标签发起的是GET请求, form标签发起的是POST请求.</strong></p></blockquote><p><strong>属性</strong></p><p><strong>action</strong><br>提交(POST)数据所到的地方.<code>action=&quot;users&quot;</code>, 就是提交到users, 一个处理这个form信息的程序所在的URL.<br><strong>method</strong><br>浏览器使用这种指定方式来提交 form, GET一般不用写, 如果是GET, 提交的数据会被作为查询参数, 并不会放到第四部分作为formdata, POST会把提交的数据放到formdata里, 如果要给POST加查询参数, 可以通过给URL加查询参数<code>?query=xxx</code><br> <strong>target</strong><br>和a标签相同<br><strong>name</strong><br>HTML5中，一个文档中的多个form当中，name必须唯一而不仅仅是一个空字符串. 也可以与<strong>iframe标签</strong>配合使用.</p><p><strong>如果form标签没有提交按钮, 则无法提交, html里只有form标签能提交数据，提交按钮可以是有一个 input type=submit 的元素或者有一个 button 元素，button 的 type 属性为空</strong></p><hr><h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><p><strong>HTML input 元素</strong>用于为基于Web的表单创建交互式控件，以便接受来自用户的数据。使用input标签提交数据, 必须有name属性.</p><p><strong>属性</strong></p><p><strong>type</strong><br> 要呈现的控件类型</p><ul><li><code>type=&quot;button&quot;</code>: 普通按钮 </li><li><code>type=&quot;checkbox&quot;</code>: 复选框。必须使用 value 属性定义此控件被提交时的值</li><li><code>color</code>： 用于指定颜色的控件。</li><li><code>date：</code>用于输入日期的控件（年，月，日，不包括时间）。</li><li><code>datetime</code>：基于 UTC 时区的日期时间输入控件（时，分，秒及几分之一秒）。</li><li><code>datetime-local</code>：用于输入日期时间控件，不包含时区。</li><li><code>email</code>：用于编辑 e-mail 的字段。 合适的时候可以使用 </li><li><code>file</code>：此控件可以让用户选择文件。使用 accept 属性可以定义控件可以选择的文件类型。</li><li><code>hidden</code>：不显示在页面上的控件，但它的值会被提交到服务器。</li><li><code>image</code>：图片提交按钮。必须使用 src 属性定义图片的来源及使用 alt 定义替代文本。还可以使用 height 和 width 属性以像素为单位定义图片的大小。</li><li><code>month</code>：用于输入年月的控件，不带时区。</li><li><code>number</code>:用于输入浮点数的控件。</li><li><code>password</code>：一个值被遮盖的单行文本字段。使用 maxlength 指定可以输入的值的最大长度 。</li><li><code>radio</code>：单选按钮。必须使用 value 属性定义此控件被提交时的值。使用checked 必须指示控件是否缺省被选择。在同一个”单选按钮组“中，所有单选按钮的 name 属性使用同一个值； 一个单选按钮组中是，同一时间只有一个单选按钮可以被选择。 </li><li><code>reset</code>：用于将表单所内容设置为缺省值的按钮。</li><li><code>search</code>：用于输入搜索字符串的单行文本字段。换行会被从输入的值中自动移除。</li><li><code>submit</code>：用于提交表单的按钮。</li><li><code>tel</code>： 用于输入电话号码的控件；换行会被自动从输入的值中移除A，但不会执行其他语法。可以使用属性，比如 pattern 和 maxlength 来约束控件输入的值。恰当的时候，可以应用 </li><li><code>text</code>：单行字段；换行会将自动从输入的值中移除。</li><li><code>time</code>：用于输入不含时区的时间控件。</li><li><code>url</code>：用于编辑URL的字段。 The user may enter a blank or invalid address. 换行会被自动从输入值中移队。可以使用如：pattern 和 maxlength 样的属性来约束输入的值。 恰当的时候使可以应用 </li><li><code>week</code>：用于输入一个由星期-年组成的日期，日期不包括时区。</li></ul><p><strong>autocomplete</strong><br>这个属性表示这个控件的值是否可被浏览器自动填充。如果<strong>type</strong>属性的值是hidden、checkbox、radio、file，或为按钮类型（button、submit、reset、image），则本属性被忽略。</p><p><strong>autofocus</strong><br>这个布尔属性允许您指定的表单控件在页面加载时具有焦点（自动获得焦点），除非用户将其覆盖，例如通过键入不同的控件。文档中只有一个表单元素可以具有autofocus属性，它是一个布尔值。 如果type属性设置为隐藏则不能应用（即您不能自动获得焦点的属性设置为隐藏的控件）。</p><p><strong>disabled</strong><br>这个布尔属性表示此表单控件不可用。 特别是在禁用的控件中， <code>click</code> 事件 [将不会被分发]。 并且，禁用的控件的值在提交表单时也不会被提交。如果 <strong>type</strong> 属性为  hidden，此属性将被忽略。</p><p><strong>小Tips:可以使用将input元素嵌入到label元素中达到点击文本时自动将焦点移动到input上元素上</strong></p><hr><h3 id="button标签"><a href="#button标签" class="headerlink" title="button标签"></a>button标签</h3><p><strong>HTML button 元素</strong>表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方</p><p><strong>input和button区别</strong>: 是否是空元素, button有子元素, input没有</p><p><strong>属性</strong></p><p><strong>type</strong><br>button的类型</p><ul><li><code>submit</code>:  此按钮将表单数据提交给服务器。如果未指定属性，或者属性动态更改为空值或无效值，则此值为默认值。</li><li><code>reset</code>:  此按钮重置所有组件为初始值。</li><li><code>button</code>: 此按钮没有默认行为。它可以有与元素事件相关的客户端脚本，当事件出现时可触发。</li><li><code>menu</code>: 此按钮打开一个由指定元素进行定义的弹出菜单。</li></ul><p><strong>name</strong><br>button的名称，与表单数据一起提交。</p><p><strong>value</strong><br>button的初始值。它定义的值与表单数据的提交按钮相关联。当表单中的数据被提交时，这个值便以参数的形式被递送至服务器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML常用标签&quot;&gt;&lt;a href=&quot;#HTML常用标签&quot; class=&quot;headerlink&quot; title=&quot;HTML常用标签&quot;&gt;&lt;/a&gt;HTML常用标签&lt;/h1&gt;&lt;h2 id=&quot;HTML-常用标签&quot;&gt;&lt;a href=&quot;#HTML-常用标签&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求和响应初探</title>
    <link href="http://yoursite.com/2019/05/04/HTTP%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2019/05/04/HTTP请求和响应初探/</id>
    <published>2019-05-04T13:23:27.000Z</published>
    <updated>2019-05-04T13:25:24.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP请求和响应初探"><a href="#HTTP请求和响应初探" class="headerlink" title="HTTP请求和响应初探"></a>HTTP请求和响应初探</h1><p>HTTP协议作为前端开发者必须掌握的知识点，它的作用就是知道浏览器和服务器如何进行沟通。下面我们就分别用命令行和Chrome开发者工具来初步探索HTTP请求和响应的内容。</p><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><h3 id="使用命令行curl命令请求示例"><a href="#使用命令行curl命令请求示例" class="headerlink" title="使用命令行curl命令请求示例"></a>使用命令行curl命令请求示例</h3><p>在命令行中输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s -v -H <span class="string">"User: xxx"</span> -- <span class="string">"https://www.baidu.com"</span></span><br></pre></td></tr></table></figure><p>简单分析一下我们创造的命令，curl用来创造一个请求，-s是-silent的缩写，表示不显示进度条和错误信息，-v是-verbose的缩写，常用于debug时候查找详细信息，-H “User: xxx”表示自定义一个header。接下来我们关注一下命令行显示的请求内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: curl/7.63.0</span><br><span class="line">Accept: */*</span><br><span class="line">User: xxx</span><br></pre></td></tr></table></figure><p>然后我们把请求的方式变成POST，在命令行中输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -s -v -H <span class="string">"User: xxx"</span> -- <span class="string">"https://www.baidu.com"</span></span><br></pre></td></tr></table></figure><p>得到的请求内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: curl/7.63.0</span><br><span class="line">Accept: */*</span><br><span class="line">User: xxx</span><br></pre></td></tr></table></figure><p>​    </p><p>我们继续在POST请求的基础上加入-d data内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -d <span class="string">"1234567890"</span> -s -v -H <span class="string">"User: xxx"</span> -- <span class="string">"https://www.baidu.com"</span></span><br></pre></td></tr></table></figure><p>得到的请求内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: curl/7.63.0</span><br><span class="line">Accept: */*</span><br><span class="line">User: xxx</span><br><span class="line">Content-Length: 10</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">1234567890</span><br></pre></td></tr></table></figure><p>​                                                                                                                               `</p><h3 id="使用Chrome开发者工具查看请求内容"><a href="#使用Chrome开发者工具查看请求内容" class="headerlink" title="使用Chrome开发者工具查看请求内容"></a>使用Chrome开发者工具查看请求内容</h3><ol><li>打开chrome,按F12，点击Network</li><li>输入网址<a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></li><li>选中第一个响应</li><li>查看 Request Headers，点击「view source」，会看到如下图所示的请求内容</li></ol><h3 id="请求的格式"><a href="#请求的格式" class="headerlink" title="请求的格式"></a>请求的格式</h3><p>我们已经通过curl命令和Chorme开发者工具两种方式看到了HTTP的请求内容，下面我们总结一下HTTP请求的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 动词 路径 协议/版本</span><br><span class="line">2 Key1: value1</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Key3: value3</span><br><span class="line">2 Content-Type: application/x-www-form-urlencoded</span><br><span class="line">2 Host: www.baidu.com</span><br><span class="line">2 User-Agent: curl/7.54.0</span><br><span class="line">3 </span><br><span class="line">4 要上传的数据</span><br></pre></td></tr></table></figure><ol><li>请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）</li><li>第三部分永远都是一个回车（<code>\n</code>）</li><li>动词有 GET POST PUT PATCH DELETE HEAD OPTIONS 等</li><li>这里的路径包括「查询参数」，但不包括「锚点」</li><li>如果你没有写路径，那么路径默认为 /</li><li>第 2 部分中的 Content-Type 标注了第 4 部分的格式</li><li>第3部分只是一个空行，目的是为了区分第2部分和第4部分要上传的数据</li></ol><h2 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><p>请求了之后，应该都能得到一个响应，除非断网了，或者服务器宕机了。</p><h3 id="响应示例"><a href="#响应示例" class="headerlink" title="响应示例"></a>响应示例</h3><p>上面三个请求示例，前两个请求对应的响应分别为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 2443</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Tue, 10 Oct 2017 09:14:05 GMT</span><br><span class="line">Etag: &quot;5886041d-98b&quot;</span><br><span class="line">Last-Modified: Mon, 23 Jan 2017 13:24:45 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Server: bfe/1.0.8.18</span><br><span class="line">Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt; 后面太长，省略了……</span><br><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 17931</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Tue, 10 Oct 2017 09:19:47 GMT</span><br><span class="line">Etag: &quot;54d9749e-460b&quot;</span><br><span class="line">Server: bfe/1.0.8.18</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; 后面太长，省略了……</span><br></pre></td></tr></table></figure><ol><li>GET 请求和 POST 请求对应的响应可以一样，也可以不一样</li><li>响应的第四部分可以很长很长很长</li></ol><h3 id="响应的格式"><a href="#响应的格式" class="headerlink" title="响应的格式"></a>响应的格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 协议/版本号 状态码 状态解释</span><br><span class="line">2 Key1: value1</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Content-Length: 17931</span><br><span class="line">2 Content-Type: text/html</span><br><span class="line">3</span><br><span class="line">4 要下载的内容</span><br></pre></td></tr></table></figure><ul><li>状态码要背，是服务器对浏览器说的话<ul><li>1xx 不常用</li><li>2xx 表示成功</li><li>3xx 表示滚吧</li><li>4xx 表示你丫错了</li><li>5xx 表示好吧，我错了</li></ul></li><li>状态解释没什么用</li><li>第 2 部分中的 Content-Type 标注了第 4 部分的格式</li><li>第 2 部分中的 Content-Type 遵循 MIME 规范</li></ul><h3 id="用-Chrome-查看响应"><a href="#用-Chrome-查看响应" class="headerlink" title="用 Chrome 查看响应"></a>用 Chrome 查看响应</h3><ol><li>打开 Network</li><li>输入网址</li><li>选中第一个响应</li><li>查看 Response Headers，点击「view source」</li><li>你会看到响应的前两部分</li><li>查看 Response 或者 Preview，你会看到响应的第 4 部分</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP请求和响应初探&quot;&gt;&lt;a href=&quot;#HTTP请求和响应初探&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求和响应初探&quot;&gt;&lt;/a&gt;HTTP请求和响应初探&lt;/h1&gt;&lt;p&gt;HTTP协议作为前端开发者必须掌握的知识点，它的作用就是知道浏览器和
      
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>生活已经那么多不如意，何苦还要去游戏中添堵呢</title>
    <link href="http://yoursite.com/2019/04/20/%E7%94%9F%E6%B4%BB%E5%B7%B2%E7%BB%8F%E9%82%A3%E4%B9%88%E5%A4%9A%E4%B8%8D%E5%A6%82%E6%84%8F%EF%BC%8C%E4%BD%95%E8%8B%A6%E8%BF%98%E8%A6%81%E5%8E%BB%E6%B8%B8%E6%88%8F%E4%B8%AD%E6%B7%BB%E5%A0%B5%E5%91%A2/"/>
    <id>http://yoursite.com/2019/04/20/生活已经那么多不如意，何苦还要去游戏中添堵呢/</id>
    <published>2019-04-20T14:54:51.000Z</published>
    <updated>2019-04-20T15:02:06.918Z</updated>
    
    <content type="html"><![CDATA[<p><strong>生活已经那么多不如意，何苦还要在游戏中添堵呢，不如去读万卷书，行万里路。去和家人多呆一会，去和朋友多交流一些，走出去吧</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;生活已经那么多不如意，何苦还要在游戏中添堵呢，不如去读万卷书，行万里路。去和家人多呆一会，去和朋友多交流一些，走出去吧&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="心绪来潮" scheme="http://yoursite.com/tags/%E5%BF%83%E7%BB%AA%E6%9D%A5%E6%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>2019了，该做点什么了</title>
    <link href="http://yoursite.com/2019/02/07/2019%E4%BA%86%EF%BC%8C%E8%AF%A5%E5%81%9A%E7%82%B9%E4%BB%80%E4%B9%88%E4%BA%86/"/>
    <id>http://yoursite.com/2019/02/07/2019了，该做点什么了/</id>
    <published>2019-02-07T05:32:31.000Z</published>
    <updated>2019-02-07T05:44:05.844Z</updated>
    
    <content type="html"><![CDATA[<p>转眼2019了，年华易逝，珍惜当下，该做点什么了，就从新建第一个博客开始吧</p><h2 id="新年计划"><a href="#新年计划" class="headerlink" title="新年计划"></a>新年计划</h2><h3 id="巩固基础"><a href="#巩固基础" class="headerlink" title="巩固基础"></a>巩固基础</h3><h4 id="基础中的基础"><a href="#基础中的基础" class="headerlink" title="基础中的基础"></a>基础中的基础</h4><p>掌握 Java。经典的《Java 核心技术：卷1 基础知识》(或者《Java 编程思想》)必看，跳过其中的图形和 applet 章节。习惯通过 Java API Doc。为了保证代码的质量，《Effective Java》、《Clean Code》和《重构》也需要至少通读一遍。</p><p>熟悉 Linux 开发环境和 bash shell。Linux 是我们的开发和部署环境，你最好尽快熟练它。Linux 的基本使用可以通过《鸟哥的Linux私房菜：基础学习篇（第三版）》学习，开发 bash shell 脚本可以参考《Linux Shell脚本攻略》。</p><p>掌握开发工具，熟练使用一种 IDE。Intellij IDEA或者 Eclipse 都可以，推荐使用前者。至少熟悉常用的快捷键，会 debug(包括远程 debug)项目。</p><p>熟悉一种编辑器。比如 Vim/Emacs，至少学会搜索/替换/代码补全。</p><p>掌握 JDK 以外的常用类库和工具包。JDK 原生 API 在很多场景下使用并不方便。你需要掌握社区贡献的优秀类库和工具包，比如 apache commons、google guava 等，具体可以翻阅《技术选型手册》的Utility 篇。</p><p>掌握 Web 开发框架。我们使用 Spring(或Rose) + Ibatis(或Jade) 开发 web 服务，你需要熟练掌握它们。</p><p>学习代码规范。我们大致上遵循 oracle 的 Java 语言编码规范，你可以先阅读并熟悉它。Code Formatting 文件在 <a href="mailto:git@git.x.xx.com" target="_blank" rel="noopener">git@git.x.xx.com</a>:xiaomi-commons/coding-standard.git，在编写代码之前，请把它导入到 IDE 中。另外，确认 IDE 已经安装 Findbugs 和 CheckStyle 插件。</p><p>熟悉开发流程。我们的开发流程大致如下：功能开发-&gt;单元测试-&gt;功能测试-&gt;Code Review-&gt;集成测试-&gt;发布。确保你熟悉其中的每个环节。</p><p>其他。需要熟练使用版本控制工具 Git（阅读：《Git 权威指南》），以及项目构建工具 Maven（阅读：《Maven实战》）。另外，在这个阶段可以尝试 TDD 开发。</p><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><p>目标：独立负责某个服务端项目。</p><p>技能：</p><p>掌握 web 开发最佳实践，掌握 Restful API 设计，理解 Spring 原理。推荐阅读《Spring 揭秘》。掌握项目分层、子模块划分。推荐阅读：《J2EE 核心模式》。</p><p>掌握 web 架构设计。包括 Http 反向代理，数据缓存，负载均衡，水平扩展和垂直扩展。推荐阅读：《分布式Java应用：基础与实践》。</p><p>掌握关系型数据库。包括设计 MySQL 表结构，根据业务特点分表分库，基于执行计划的 SQL 分析优化，以及数据库容量规划。推荐阅读：《MySQL 必知必会》、《高性能 MySQL》。</p><p>了解 NoSQL。我们大规模使用 Hadoop、HBase、Hive，同时部分项目使用 Redis、Storm。你需要学会这些工具最基本的使用。</p><p>掌握 Http(推荐阅读：《图解 Http》、《Http 权威指南》)、Thrift 等协议。</p><p>掌握服务容量规划，性能调优，可靠性保证，以及故障处理。学习容量规划和性能调优知识，梳理业务监控点，熟练使用我们的监控报警系统。推荐阅读：《深入理解 Java 虚拟机》。</p><p>其他。设计模式：从项目中学习，有时间可以看看《深入浅出设计模式》、《JDK 里的设计模式》。学习Java Socket 编程与多线程知识，可以看看《Java 并发编程实战》，并翻翻并发编程网的文章。</p><h4 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h4><p>目标：分布式系统和中间件开发。</p><p>构建知识体系：《大型网站系统与 Java 中间件实践》、《大型网站技术架构：核心原理与案例分析》。</p><p>原理与设计：《大规模存储式系统》、《UNIX 网络编程 卷1:套接字联网 API》、《How Tomcat Works》。</p><p>学习开源项目：Apache Thrift、Zipkin、Netty、Rose、Jade、淘宝 RPC 系统 Dubbo 等。分析项目中的设计思路。比如，同样是RPC框架，Finagle 和 Dubbo 有什么异同。</p><p>其他。根据参与的项目加深学习吧。比如，如果需要写 DSL，可以读一下《领域特定语言》，对 Redis 感兴趣推荐读一下：《Redis 设计与实现》。有两本书，无论做什么项目，都推荐读：《Unix 编程艺术》、《UNIX 环境高级编程(第3版)》。</p><h3 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h3><p>每天至少1万步，目标75Kg</p><h3 id="拒绝熬夜"><a href="#拒绝熬夜" class="headerlink" title="拒绝熬夜"></a>拒绝熬夜</h3><p>12点前入睡</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转眼2019了，年华易逝，珍惜当下，该做点什么了，就从新建第一个博客开始吧&lt;/p&gt;
&lt;h2 id=&quot;新年计划&quot;&gt;&lt;a href=&quot;#新年计划&quot; class=&quot;headerlink&quot; title=&quot;新年计划&quot;&gt;&lt;/a&gt;新年计划&lt;/h2&gt;&lt;h3 id=&quot;巩固基础&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
</feed>
