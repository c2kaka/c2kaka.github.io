<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欧阳帆</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-19T06:15:12.163Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>kaka</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>层叠顺序</title>
    <link href="http://yoursite.com/2019/05/19/%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F%E5%92%8C%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>http://yoursite.com/2019/05/19/层叠顺序和层叠上下文/</id>
    <published>2019-05-19T05:35:25.000Z</published>
    <updated>2019-05-19T06:15:12.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="层叠顺序和层叠上下文"><a href="#层叠顺序和层叠上下文" class="headerlink" title="层叠顺序和层叠上下文"></a>层叠顺序和层叠上下文</h1><p>默认情况下，网页内容是没有偏移角的垂直视觉呈现，当内容发生层叠的时候，一定会有一个前后的层叠顺序产生，而要理解网页中元素是如何“论资排辈”的，就需要深入理解CSS中的层叠上下文和层叠顺序。</p><h2 id="一、层叠上下文的概念"><a href="#一、层叠上下文的概念" class="headerlink" title="一、层叠上下文的概念"></a>一、层叠上下文的概念</h2><p>层叠上下文（Stacking context）是HTML中的一个三维的概念，如果一个元素含有层叠上下文，那么这个元素在Z轴上就要”高人一等“。这个Z轴指的就是眼睛与屏幕这条看不见的垂直线。</p><h2 id="二、层叠水平的概念"><a href="#二、层叠水平的概念" class="headerlink" title="二、层叠水平的概念"></a>二、层叠水平的概念</h2><p>层叠水平（Stacking level）决定了同一个层叠上下文中元素在z轴上的显示顺序。所有的元素都有层叠水平，包括层叠上下文元素。对于普通元素的层叠水平优先由层叠上下文决定，层叠水平的比较只有在当前层叠上下文元素中才有意义。</p><p>不要把层叠水平和CSS的z-index属性混为一谈。没错，某些情况下z-index确实可以影响层叠水平，但是，只限于定位元素以及flex盒子的孩子元素；而层叠水平所有的元素都存在。</p><h2 id="三、了解层叠顺序"><a href="#三、了解层叠顺序" class="headerlink" title="三、了解层叠顺序"></a>三、了解层叠顺序</h2><p><img src="https://i.loli.net/2019/05/19/5ce0f322dddc431970.png" alt="Markdown"></p><p>下面这两个是层叠领域的黄金准则。当元素发生层叠的时候，其覆盖关系遵循下面2个准则：</p><ol><li><strong>谁大谁上：</strong>当具有明显的层叠水平标示的时候，如识别的z-index值，在同一个层叠上下文领域，层叠水平值大的那一个覆盖小的那一个。</li><li><strong>后来居上：</strong>当元素的层叠水平一致、层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。</li></ol><p>在CSS和HTML领域，只要元素发生了重叠，都离不开上面这两个黄金准则。</p><h2 id="四、层叠上下文的形成"><a href="#四、层叠上下文的形成" class="headerlink" title="四、层叠上下文的形成"></a>四、层叠上下文的形成</h2><p>可以理解为层叠作用域。跟 BFC 一样，我们只知道一些属性会触发层叠上下文，但并不知道层叠上下文是什么。</p><ul><li>根元素 (HTML),</li><li>z-index 值不为 “auto”的 绝对/相对定位，</li><li>一个 z-index 值不为 “auto”的 flex 项目 (flex item)，即：父元素 display: flex|inline-flex，</li><li>opacity 属性值小于 1 的元素（参考 the specification for opacity），</li><li>transform 属性值不为 “none”的元素，</li><li>mix-blend-mode 属性值不为 “normal”的元素，</li><li>filter值不为“none”的元素，</li><li>perspective值不为“none”的元素，</li><li>isolation 属性被设置为 “isolate”的元素，</li><li>position: fixed</li><li>在 will-change 中指定了任意 CSS 属性，即便你没有直接指定这些属性的值（参考 这篇文章）</li><li>-webkit-overflow-scrolling 属性被设置 “touch”的元素</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;层叠顺序和层叠上下文&quot;&gt;&lt;a href=&quot;#层叠顺序和层叠上下文&quot; class=&quot;headerlink&quot; title=&quot;层叠顺序和层叠上下文&quot;&gt;&lt;/a&gt;层叠顺序和层叠上下文&lt;/h1&gt;&lt;p&gt;默认情况下，网页内容是没有偏移角的垂直视觉呈现，当内容发生层叠的时候，一定会
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>VSCode前端开发插件配置</title>
    <link href="http://yoursite.com/2019/05/19/VSCode%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/05/19/VSCode前端开发插件配置/</id>
    <published>2019-05-19T02:38:13.000Z</published>
    <updated>2019-05-19T02:40:52.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VSCode前端开发插件配置"><a href="#VSCode前端开发插件配置" class="headerlink" title="VSCode前端开发插件配置"></a>VSCode前端开发插件配置</h1><p>作为前端开发人员，拥有一款适合自己的编辑器无异于如虎添翼，之前经常使用SumlimeText的我首次试用VSCode就有一种心动的感觉。VSCode这款免费的编辑器颜值够高，合理配置插件后也可以媲美WebStorm这种硬核的编辑器，那么你还有什么理由拒绝它呢。</p><p>每每上手新的编辑器，我都会根据自己的开发习惯把它调较到理想状态，加上熟悉编辑器各种特性，这个过程通常需要几周的时间。接下来，我就从外观配置、风格检查、编码效率、功能增强等 4 方面来侃侃怎么配置 VSCode 来提高工作幸福感。</p><h2 id="外观配置"><a href="#外观配置" class="headerlink" title="外观配置"></a>外观配置</h2><p>作为前端开发者，外观当然是最先考虑的部分，从配置的角度，无非是配色、图标、字体等，俗话说萝卜白菜各有所爱，我目前的配色、图标字体如下：</p><ul><li>配色：One Dark Pro，在VSCode Extensions中搜索One Dark Pro安装即可</li><li>图标：Material Icon Theme，给不同类型的文件配置不同的图标，非常直观；</li><li>字体：Fira Code，自从发现并开始使用 Fira Code，我就再也没多看自其它字体一眼，字体如果比较优雅，尤其是对数学运算符的处理</li><li><h2 id="风格检查"><a href="#风格检查" class="headerlink" title="风格检查"></a>风格检查</h2></li><li><p>保障优秀一致的代码风格是一个程序员的高尚品质，如果编辑器在编码时实时给出反馈，对开发者个人而言才是最高效的，在提交时做强制检查只是从团队的视角保证编码风格的规范性和一致性。前端工程师会书写的代码无非是：HTML、CSS、Javascript、Markdown、TypeScript、JSON，对应的 Lint 工具就显而易见：</p></li><li>ESLint：插件式架构，有多种主流的编码风格规则集可供选择，典型的有 Airbnb、Google 等</li><li>StyleLint，同样插件式架构的样式检查工具</li><li>TSLint：编写TypeScript你会想用到它的 </li><li>MarkdownLint：Markdown 如果不合法，可能在某些场合导致解析器异常，因为 Markdown 有好几套标准，在不同标准间部分语法支持可能是不兼容的；</li></ul><p>有了风格检查，自然就会产生按配置好的风格规则做文件格式化的需求，另外推荐一款好用的格式化工具：Prettier，实际上已经是代码格式化的工具标准，支持格式化几乎所有的前端代码，并且类似于 EditorConfig 支持用文件来配置格式规则；</p><h2 id="编码效率"><a href="#编码效率" class="headerlink" title="编码效率"></a>编码效率</h2><p>说到编码效率，当你感觉击键的速率已经赶不上自己的思维时就需要在编码时设置适当的快捷键，组合使用智能建议、代码片段、自动补全来达到速度的最大化。重点说说代码片段和自动补全两个效率提升利器。代码片段英文叫做 Snippets，市面上主流的编辑器也都支持，其基本思想就是把常见的代码模式抽出来，通过 2~3 个键就能展开 N 行代码，代码片段的积累一方面是根据个人习惯，另一方面是学习社区里面积累出来的好的编码模式，如果觉得不适合你，可以改（找个现有的插件依葫芦画瓢）</p><h3 id="常用的代码片段插件"><a href="#常用的代码片段插件" class="headerlink" title="常用的代码片段插件"></a>常用的代码片段插件</h3><ul><li>HTML Snippets，各种 HTML 标签片段，如果你 Emmet 玩的熟，完全可以忽略这个</li><li>Javascript (ES6) Code Snippets，常用的类声明、ES 模块声明、CMD 模块导入等，支持的缩写不下 20 种</li><li>Javascript Patterns Snippets，常见的编码模式，比如 IIFE；自动补全自动补全本质上和代码片段类似，不过是在特殊场合下以你的键入做为启发式信息提供最有可能要输入的建议</li></ul><h3 id="常用的自动补全工具"><a href="#常用的自动补全工具" class="headerlink" title="常用的自动补全工具"></a>常用的自动补全工具</h3><ul><li>Auto Close Tag，适用于 JSX、Vue、HTML，在打开标签并且键入 &lt;/ 的时候，能自动补全要闭合的标签；</li><li>Auto Rename Tag，适用于 JSX、Vue、HTML，在修改标签名时，能在你修改开始（结束）标签的时候修改对应的结束（开始）标签，帮你减少 50% 的击键</li><li>Path Intellisense，文件路径补全，在你用任何方式引入文件系统中的路径时提供智能提示和自动完成；NPM Intellisense，NPM 依赖补全，在你引入任何 node_modules 里面的依赖包时提供智能提示和自动完成</li><li>IntelliSense for CSS class names，CSS 类名补全，会自动扫描整个项目里面的 CSS 类名并在你输入类名时做智能提示</li><li>Emmet，以前叫做 Zen Coding，我发现后，也是爱不释手，可以把类 CSS 选择符的字符串展开成 HTML 标签，VSCode 已经内置，官方介绍文档参见，你需要做的就是熟悉他的语法，并勤加练习</li></ul><h3 id="TODO-Highlight"><a href="#TODO-Highlight" class="headerlink" title="TODO Highlight"></a>TODO Highlight</h3><p>维护时间稍长的代码仓库免不了会有各种 TODO、FIXME、HACK 之类的标记，TODO Highlight 能够帮我们把这些关键词高亮出来，在你翻阅代码时非常醒目，就像是在大声提醒你尽快把他解决掉。支持自定义配置需要高亮的关键词，实际使用比较坑的地方是，TODO、FIXME 之类的后面必须加上冒号，否则无法高亮。</p><p>功能增强在效率提升方面除了上面的代码片段、自动补全之外，我还安装了下面几个插件，方便快速的浏览和理解代码，并且在不同项目之间切换。</p><ul><li>Color Highlight，识别代码中的颜色，包括各种颜色格式；</li><li>Bracket Pair Colorizer，识别代码中的各种括号，并且标记上不同的颜色，方便你扫视到匹配的括号，在括号使用非常多的情况下能环节眼部压力，编辑器快捷键固然好用，但是在临近嵌套多的情况下却有些力不从心；</li><li>Project Manager，项目管理，让我们方便的在命令面板中切换项目文件夹，当然，你也可以直接打开包含多个项目的父级文件夹，但这样可能会让 VSCode 变慢；</li></ul><h2 id="不同设备同步VSCode配置"><a href="#不同设备同步VSCode配置" class="headerlink" title="不同设备同步VSCode配置"></a>不同设备同步VSCode配置</h2><h3 id="Settings-Sync"><a href="#Settings-Sync" class="headerlink" title="Settings Sync"></a>Settings Sync</h3><p>Settings Sync 基于 Gist 实现 VSCode 用户配置、快捷键配置、已安装插件列表等的备份和恢复功能，配置过程有详细精确的操作步骤文档。生成的备份 Gist 默认是私密的，如果你想设置为共享的，也可以一键切换。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VSCode前端开发插件配置&quot;&gt;&lt;a href=&quot;#VSCode前端开发插件配置&quot; class=&quot;headerlink&quot; title=&quot;VSCode前端开发插件配置&quot;&gt;&lt;/a&gt;VSCode前端开发插件配置&lt;/h1&gt;&lt;p&gt;作为前端开发人员，拥有一款适合自己的编辑器无
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="VSCode" scheme="http://yoursite.com/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>CSS进阶笔记</title>
    <link href="http://yoursite.com/2019/05/19/CSS%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/05/19/CSS进阶笔记/</id>
    <published>2019-05-19T00:49:29.000Z</published>
    <updated>2019-05-19T05:11:12.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标准流Normal-Flow"><a href="#标准流Normal-Flow" class="headerlink" title="标准流Normal Flow"></a>标准流Normal Flow</h1><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><ul><li><p>宽度固定：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"> <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>宽度不固定：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h3><p>设置内联元素的父元素text-align属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><p>不兼容IE时，可以使用flex布局简单实现：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>兼容IE时，可以使用table布局</p><h2 id="文字溢出省略"><a href="#文字溢出省略" class="headerlink" title="文字溢出省略"></a>文字溢出省略</h2><ul><li><p>单行文字溢出省略：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>多行文字溢出省略：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">     <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">     <span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>; <span class="comment">/*在这里设置行数*/</span></span><br><span class="line">     <span class="attribute">-webkit-box-orient</span>: vertical; </span><br><span class="line">     <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><h3 id="盒模型分类：W3C标准盒模型和IE盒模型"><a href="#盒模型分类：W3C标准盒模型和IE盒模型" class="headerlink" title="盒模型分类：W3C标准盒模型和IE盒模型"></a>盒模型分类：W3C标准盒模型和IE盒模型</h3><p> 盒模型分为W3C标准盒模型和IE盒模型。在ie8+浏览器中使用哪个盒模型可以由<strong>box-sizing</strong>(CSS新增的属性)控制，默认值为content-box，即标准盒模型；如果将box-sizing设为border-box则用的是IE盒模型。如果在ie6,7,8中DOCTYPE缺失会触发IE模式。在当前W3C标准中盒模型是可以通过box-sizing自由的进行切换的。</p><ol><li>W3C标准盒模型：属性width和height只包含content,不包含padding和border</li><li>IE盒模型：属性width,height包含border和padding，指的是content+padding+border。</li></ol><h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h3><p>要学会使用border进行CSS的调试，可以说不会border调试方法就不要写CSS啦~.~</p><h3 id="实现一个宽度自适应的1-1的div"><a href="#实现一个宽度自适应的1-1的div" class="headerlink" title="实现一个宽度自适应的1:1的div"></a>实现一个宽度自适应的1:1的div</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;标准流Normal-Flow&quot;&gt;&lt;a href=&quot;#标准流Normal-Flow&quot; class=&quot;headerlink&quot; title=&quot;标准流Normal Flow&quot;&gt;&lt;/a&gt;标准流Normal Flow&lt;/h1&gt;&lt;h2 id=&quot;水平居中&quot;&gt;&lt;a href=&quot;#水
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记</title>
    <link href="http://yoursite.com/2019/05/09/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/05/09/CSS学习笔记/</id>
    <published>2019-05-09T12:21:25.000Z</published>
    <updated>2019-05-19T00:53:38.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS学习笔记"><a href="#CSS学习笔记" class="headerlink" title="CSS学习笔记"></a>CSS学习笔记</h1><h2 id="导航栏的CSS简单实现"><a href="#导航栏的CSS简单实现" class="headerlink" title="导航栏的CSS简单实现"></a>导航栏的CSS简单实现</h2><p>利用css可以将垂直展示的ul,ol列表转变为水平展示的导航栏<br><strong>html代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;clearfix&quot;&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;关于&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;技能&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;作品&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;博客&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;日历&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;联系方式&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;其他&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><strong>css代码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">clearfix::after&#123;</span><br><span class="line">    content:&quot;&quot;;</span><br><span class="line">    display:block;</span><br><span class="line">    clear:both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li &#123;</span><br><span class="line">float: left;</span><br><span class="line">margin-left: 17px;</span><br><span class="line">margin-right: 17px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以记住口诀：子元素加float属性，父元素使用clearfix</p><h2 id="高度是由什么决定的"><a href="#高度是由什么决定的" class="headerlink" title="高度是由什么决定的"></a>高度是由什么决定的</h2><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><p>块级元素相对简单，高度是由其内部文档流高度总和决定的。那么什么是文档流呢？文档流即是文档内的元素流动方向。内联元素是从左往右流动的，当宽度不足时，自动换行。块级元素是从上往下流动的。</p><h3 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h3><p>内联元素相对复杂，其中font-size的问题最为经典，font-size的值指字体最低的部分到字体最高部分的距离，而为了展示效果，默认行高根据不同字体有所差异。我们也可以通过line-height属性来设置建议行高，然后只有在字体大小较小时，line-height才生效。</p><h2 id="css画一个三角形"><a href="#css画一个三角形" class="headerlink" title="css画一个三角形"></a>css画一个三角形</h2><p>html代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;triangle&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>css代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.triangle&#123;</span><br><span class="line">  width:0;</span><br><span class="line">  border:20px solid transparent;</span><br><span class="line">  border-top-width:0;</span><br><span class="line">  border-left-color:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS学习笔记&quot;&gt;&lt;a href=&quot;#CSS学习笔记&quot; class=&quot;headerlink&quot; title=&quot;CSS学习笔记&quot;&gt;&lt;/a&gt;CSS学习笔记&lt;/h1&gt;&lt;h2 id=&quot;导航栏的CSS简单实现&quot;&gt;&lt;a href=&quot;#导航栏的CSS简单实现&quot; class=&quot;he
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>HTTP常用标签</title>
    <link href="http://yoursite.com/2019/05/08/HTTP%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2019/05/08/HTTP常用标签/</id>
    <published>2019-05-08T15:03:57.000Z</published>
    <updated>2019-05-19T00:53:44.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h1><h2 id="HTML-常用标签"><a href="#HTML-常用标签" class="headerlink" title="HTML 常用标签"></a>HTML 常用标签</h2><h3 id="iframe标签"><a href="#iframe标签" class="headerlink" title="iframe标签"></a>iframe标签</h3><p><strong>HTML内联框架元素 </strong> iframe表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中。</p><p><strong>属性</strong></p><p><strong>frameborder</strong> </p><p>取值为1时（默认值），告诉浏览器在当前iframe与其他iframe之间绘制边框，取0时则无需绘制此边框。默认的比较丑，一般取0。</p><p><strong>height</strong></p><p>以CSS像素格式指定frame的高度。</p><p><strong>width</strong></p><p>以CSS像素格式或以百分比格式指定frame的宽度。</p><p><strong>name</strong></p><p>嵌入的浏览上下文（框架）的名称。该名称可以用作标签a，form的<code>target</code>属性值，或者标签input，button的<code>formtaget</code>属性值。</p><p><strong>src</strong></p><p>嵌套页面的URL地址。使用遵守同源策略的  <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#Inherited_origins" target="_blank" rel="noopener">‘about:blank’</a> 来嵌套空白页。</p><hr><h3 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h3><p><strong>HTML</strong>  元素  (或锚元素) 可以创建一个到其他网页、文件、同一页面内的位置、电子邮件地址或任何其他URL的超链接。</p><p><strong>属性</strong></p><p><strong>download</strong></p><p>此属性指示浏览器下载URL或者文件而不是导航到它，因此将提示用户将其保存为本地文件。<strong>此属性仅使用于**</strong>同源URL**, 如果不是同源(同域), 将会导航到该URL, 例如:</p><ul><li><p><code>&lt;a href=&quot;http://127.0.0.1:8080/index.html&quot; download=&quot;index&quot;&gt;下载&lt;/a&gt;</code> 会下载同源的一个index.html</p></li><li><p><code>&lt;a href=&quot;http://qq.com&quot; download=&quot;qq&quot;&gt;下载&lt;/a&gt;</code>, <code>download</code>无效, 将导航到qq.com</p><p><code>target</code>: 该属性指定在何处显示链接的资源。 取值为标签（tab），窗口（window），或框架（iframe）等浏览上下文的名称或其他关键词。</p></li><li><p><code>target=&quot;_self&quot;</code>: 当前页面加载, 如果没有指定此属性的话, 该值是默认值.</p></li><li><p><code>target=&quot;_blank&quot;</code>: 新窗口打开</p></li><li><p><code>target=&quot;_parent&quot;</code>: 会加载到当前页面的父页面, 如果没有父页面,则等同于<code>_self</code></p></li><li><p><code>targe=&quot;_top&quot;</code>: 会加载到最顶层页面, 祖先级页面, 当index1.html包含index2.html, index2.html包含index3.html, 则index3.html中的跳转则会加载到index1.html上</p></li></ul><p><strong>href</strong></p><p>包含超链接指向的URL或URL片段。</p><ul><li><code>&lt;a href=&quot;qq.com&quot;&gt;QQ&lt;/a&gt;</code>:,点击QQ不会跳转到qq.com 会把qq.com当成文件, <strong>不是以.com为后缀就是网址,也可以是文件</strong></li><li><code>&lt;a href=&quot;//qq.com&quot;&gt;QQ&lt;/a&gt;</code>, 不写协议的时候, 无协议绝对地址, 默认是当前页面协议, 是file协议, 就跳转file://qq.com, 是HTTP协议, 就跳转到<a href="http://qq.com" target="_blank" rel="noopener">http://qq.com</a></li><li><code>&lt;a href=&quot;xxx.html&quot;&gt;xxx&lt;/a&gt;</code>, 相对路径, 路径只会以目录为参考, 如果在index.html中跳转, 并不会以index.html为前缀<code>index.html/xxx.html</code>, 会显示<code>xxx.html</code></li><li><code>&lt;a href=&quot;#1&quot;&gt;1ink&lt;/a&gt;</code>, 写锚点, 会自动加到后面, 不会发起请求, <code>index.html#1</code>, 虽然不会发起请求,但是页面会有变化.</li><li><code>&lt;a href=&quot;?name=xxx&quot;&gt;query&lt;/a&gt;</code>, 写参数, 会自动加到后面, 并发起GET请求, <code>index.html?name=xxx</code></li><li><code>&lt;a href=&quot;javascript: alert(1)&quot;&gt;js&lt;/a&gt;</code>, 伪协议, 会执行js代码.</li><li><code>&lt;a href=&quot;javascript:;&quot;&gt;js&lt;/a&gt;</code>, 伪协议, 使其标签点击而不做任何动作，可以实现某些奇葩需求</li><li><code>&lt;a href=&quot;&quot;&gt;blank&lt;/a&gt;</code>, 什么也不写, 页面会刷新, 跳转到了自己.</li></ul><p><strong>name</strong></p><p>和iframe配合使用</p><hr><h3 id="form标签"><a href="#form标签" class="headerlink" title="form标签"></a>form标签</h3><p><strong>HTML</strong>元素</p><p>表示了文档中的一个区域，这个区域包含有交互控制元件，用来向web服务器提交信息。</p><blockquote><p><strong>a标签和form标签都是跳转, 区别就是a标签发起的是GET请求, form标签发起的是POST请求.</strong></p></blockquote><p><strong>属性</strong></p><p><strong>action</strong><br>提交(POST)数据所到的地方.<code>action=&quot;users&quot;</code>, 就是提交到users, 一个处理这个form信息的程序所在的URL.<br><strong>method</strong><br>浏览器使用这种指定方式来提交 form, GET一般不用写, 如果是GET, 提交的数据会被作为查询参数, 并不会放到第四部分作为formdata, POST会把提交的数据放到formdata里, 如果要给POST加查询参数, 可以通过给URL加查询参数<code>?query=xxx</code><br> <strong>target</strong><br>和a标签相同<br><strong>name</strong><br>HTML5中，一个文档中的多个form当中，name必须唯一而不仅仅是一个空字符串. 也可以与<strong>iframe标签</strong>配合使用.</p><p><strong>如果form标签没有提交按钮, 则无法提交, html里只有form标签能提交数据，提交按钮可以是有一个 input type=submit 的元素或者有一个 button 元素，button 的 type 属性为空</strong></p><hr><h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><p><strong>HTML input 元素</strong>用于为基于Web的表单创建交互式控件，以便接受来自用户的数据。使用input标签提交数据, 必须有name属性.</p><p><strong>属性</strong></p><p><strong>type</strong><br> 要呈现的控件类型</p><ul><li><code>type=&quot;button&quot;</code>: 普通按钮 </li><li><code>type=&quot;checkbox&quot;</code>: 复选框。必须使用 value 属性定义此控件被提交时的值</li><li><code>color</code>： 用于指定颜色的控件。</li><li><code>date：</code>用于输入日期的控件（年，月，日，不包括时间）。</li><li><code>datetime</code>：基于 UTC 时区的日期时间输入控件（时，分，秒及几分之一秒）。</li><li><code>datetime-local</code>：用于输入日期时间控件，不包含时区。</li><li><code>email</code>：用于编辑 e-mail 的字段。 合适的时候可以使用 </li><li><code>file</code>：此控件可以让用户选择文件。使用 accept 属性可以定义控件可以选择的文件类型。</li><li><code>hidden</code>：不显示在页面上的控件，但它的值会被提交到服务器。</li><li><code>image</code>：图片提交按钮。必须使用 src 属性定义图片的来源及使用 alt 定义替代文本。还可以使用 height 和 width 属性以像素为单位定义图片的大小。</li><li><code>month</code>：用于输入年月的控件，不带时区。</li><li><code>number</code>:用于输入浮点数的控件。</li><li><code>password</code>：一个值被遮盖的单行文本字段。使用 maxlength 指定可以输入的值的最大长度 。</li><li><code>radio</code>：单选按钮。必须使用 value 属性定义此控件被提交时的值。使用checked 必须指示控件是否缺省被选择。在同一个”单选按钮组“中，所有单选按钮的 name 属性使用同一个值； 一个单选按钮组中是，同一时间只有一个单选按钮可以被选择。 </li><li><code>reset</code>：用于将表单所内容设置为缺省值的按钮。</li><li><code>search</code>：用于输入搜索字符串的单行文本字段。换行会被从输入的值中自动移除。</li><li><code>submit</code>：用于提交表单的按钮。</li><li><code>tel</code>： 用于输入电话号码的控件；换行会被自动从输入的值中移除A，但不会执行其他语法。可以使用属性，比如 pattern 和 maxlength 来约束控件输入的值。恰当的时候，可以应用 </li><li><code>text</code>：单行字段；换行会将自动从输入的值中移除。</li><li><code>time</code>：用于输入不含时区的时间控件。</li><li><code>url</code>：用于编辑URL的字段。 The user may enter a blank or invalid address. 换行会被自动从输入值中移队。可以使用如：pattern 和 maxlength 样的属性来约束输入的值。 恰当的时候使可以应用 </li><li><code>week</code>：用于输入一个由星期-年组成的日期，日期不包括时区。</li></ul><p><strong>autocomplete</strong><br>这个属性表示这个控件的值是否可被浏览器自动填充。如果<strong>type</strong>属性的值是hidden、checkbox、radio、file，或为按钮类型（button、submit、reset、image），则本属性被忽略。</p><p><strong>autofocus</strong><br>这个布尔属性允许您指定的表单控件在页面加载时具有焦点（自动获得焦点），除非用户将其覆盖，例如通过键入不同的控件。文档中只有一个表单元素可以具有autofocus属性，它是一个布尔值。 如果type属性设置为隐藏则不能应用（即您不能自动获得焦点的属性设置为隐藏的控件）。</p><p><strong>disabled</strong><br>这个布尔属性表示此表单控件不可用。 特别是在禁用的控件中， <code>click</code> 事件 [将不会被分发]。 并且，禁用的控件的值在提交表单时也不会被提交。如果 <strong>type</strong> 属性为  hidden，此属性将被忽略。</p><p><strong>小Tips:可以使用将input元素嵌入到label元素中达到点击文本时自动将焦点移动到input上元素上</strong></p><hr><h3 id="button标签"><a href="#button标签" class="headerlink" title="button标签"></a>button标签</h3><p><strong>HTML button 元素</strong>表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方</p><p><strong>input和button区别</strong>: 是否是空元素, button有子元素, input没有</p><p><strong>属性</strong></p><p><strong>type</strong><br>button的类型</p><ul><li><code>submit</code>:  此按钮将表单数据提交给服务器。如果未指定属性，或者属性动态更改为空值或无效值，则此值为默认值。</li><li><code>reset</code>:  此按钮重置所有组件为初始值。</li><li><code>button</code>: 此按钮没有默认行为。它可以有与元素事件相关的客户端脚本，当事件出现时可触发。</li><li><code>menu</code>: 此按钮打开一个由指定元素进行定义的弹出菜单。</li></ul><p><strong>name</strong><br>button的名称，与表单数据一起提交。</p><p><strong>value</strong><br>button的初始值。它定义的值与表单数据的提交按钮相关联。当表单中的数据被提交时，这个值便以参数的形式被递送至服务器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML常用标签&quot;&gt;&lt;a href=&quot;#HTML常用标签&quot; class=&quot;headerlink&quot; title=&quot;HTML常用标签&quot;&gt;&lt;/a&gt;HTML常用标签&lt;/h1&gt;&lt;h2 id=&quot;HTML-常用标签&quot;&gt;&lt;a href=&quot;#HTML-常用标签&quot; class=&quot;he
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求和响应初探</title>
    <link href="http://yoursite.com/2019/05/04/HTTP%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2019/05/04/HTTP请求和响应初探/</id>
    <published>2019-05-04T13:23:27.000Z</published>
    <updated>2019-05-19T00:53:49.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP请求和响应初探"><a href="#HTTP请求和响应初探" class="headerlink" title="HTTP请求和响应初探"></a>HTTP请求和响应初探</h1><p>HTTP协议作为前端开发者必须掌握的知识点，它的作用就是知道浏览器和服务器如何进行沟通。下面我们就分别用命令行和Chrome开发者工具来初步探索HTTP请求和响应的内容。</p><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><h3 id="使用命令行curl命令请求示例"><a href="#使用命令行curl命令请求示例" class="headerlink" title="使用命令行curl命令请求示例"></a>使用命令行curl命令请求示例</h3><p>在命令行中输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s -v -H <span class="string">"User: xxx"</span> -- <span class="string">"https://www.baidu.com"</span></span><br></pre></td></tr></table></figure><p>简单分析一下我们创造的命令，curl用来创造一个请求，-s是-silent的缩写，表示不显示进度条和错误信息，-v是-verbose的缩写，常用于debug时候查找详细信息，-H “User: xxx”表示自定义一个header。接下来我们关注一下命令行显示的请求内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: curl/7.63.0</span><br><span class="line">Accept: */*</span><br><span class="line">User: xxx</span><br></pre></td></tr></table></figure><p>然后我们把请求的方式变成POST，在命令行中输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -s -v -H <span class="string">"User: xxx"</span> -- <span class="string">"https://www.baidu.com"</span></span><br></pre></td></tr></table></figure><p>得到的请求内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: curl/7.63.0</span><br><span class="line">Accept: */*</span><br><span class="line">User: xxx</span><br></pre></td></tr></table></figure><p>​    </p><p>我们继续在POST请求的基础上加入-d data内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -d <span class="string">"1234567890"</span> -s -v -H <span class="string">"User: xxx"</span> -- <span class="string">"https://www.baidu.com"</span></span><br></pre></td></tr></table></figure><p>得到的请求内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: curl/7.63.0</span><br><span class="line">Accept: */*</span><br><span class="line">User: xxx</span><br><span class="line">Content-Length: 10</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">1234567890</span><br></pre></td></tr></table></figure><p>​                                                                                                                               `</p><h3 id="使用Chrome开发者工具查看请求内容"><a href="#使用Chrome开发者工具查看请求内容" class="headerlink" title="使用Chrome开发者工具查看请求内容"></a>使用Chrome开发者工具查看请求内容</h3><ol><li>打开chrome,按F12，点击Network</li><li>输入网址<a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></li><li>选中第一个响应</li><li>查看 Request Headers，点击「view source」，会看到如下图所示的请求内容</li></ol><h3 id="请求的格式"><a href="#请求的格式" class="headerlink" title="请求的格式"></a>请求的格式</h3><p>我们已经通过curl命令和Chorme开发者工具两种方式看到了HTTP的请求内容，下面我们总结一下HTTP请求的格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 动词 路径 协议/版本</span><br><span class="line">2 Key1: value1</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Key3: value3</span><br><span class="line">2 Content-Type: application/x-www-form-urlencoded</span><br><span class="line">2 Host: www.baidu.com</span><br><span class="line">2 User-Agent: curl/7.54.0</span><br><span class="line">3 </span><br><span class="line">4 要上传的数据</span><br></pre></td></tr></table></figure><ol><li>请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）</li><li>第三部分永远都是一个回车（<code>\n</code>）</li><li>动词有 GET POST PUT PATCH DELETE HEAD OPTIONS 等</li><li>这里的路径包括「查询参数」，但不包括「锚点」</li><li>如果你没有写路径，那么路径默认为 /</li><li>第 2 部分中的 Content-Type 标注了第 4 部分的格式</li><li>第3部分只是一个空行，目的是为了区分第2部分和第4部分要上传的数据</li></ol><h2 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><p>请求了之后，应该都能得到一个响应，除非断网了，或者服务器宕机了。</p><h3 id="响应示例"><a href="#响应示例" class="headerlink" title="响应示例"></a>响应示例</h3><p>上面三个请求示例，前两个请求对应的响应分别为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 2443</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Tue, 10 Oct 2017 09:14:05 GMT</span><br><span class="line">Etag: &quot;5886041d-98b&quot;</span><br><span class="line">Last-Modified: Mon, 23 Jan 2017 13:24:45 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Server: bfe/1.0.8.18</span><br><span class="line">Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt; 后面太长，省略了……</span><br><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 17931</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Tue, 10 Oct 2017 09:19:47 GMT</span><br><span class="line">Etag: &quot;54d9749e-460b&quot;</span><br><span class="line">Server: bfe/1.0.8.18</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; 后面太长，省略了……</span><br></pre></td></tr></table></figure><ol><li>GET 请求和 POST 请求对应的响应可以一样，也可以不一样</li><li>响应的第四部分可以很长很长很长</li></ol><h3 id="响应的格式"><a href="#响应的格式" class="headerlink" title="响应的格式"></a>响应的格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 协议/版本号 状态码 状态解释</span><br><span class="line">2 Key1: value1</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Content-Length: 17931</span><br><span class="line">2 Content-Type: text/html</span><br><span class="line">3</span><br><span class="line">4 要下载的内容</span><br></pre></td></tr></table></figure><ul><li>状态码要背，是服务器对浏览器说的话<ul><li>1xx 不常用</li><li>2xx 表示成功</li><li>3xx 表示滚吧</li><li>4xx 表示你丫错了</li><li>5xx 表示好吧，我错了</li></ul></li><li>状态解释没什么用</li><li>第 2 部分中的 Content-Type 标注了第 4 部分的格式</li><li>第 2 部分中的 Content-Type 遵循 MIME 规范</li></ul><h3 id="用-Chrome-查看响应"><a href="#用-Chrome-查看响应" class="headerlink" title="用 Chrome 查看响应"></a>用 Chrome 查看响应</h3><ol><li>打开 Network</li><li>输入网址</li><li>选中第一个响应</li><li>查看 Response Headers，点击「view source」</li><li>你会看到响应的前两部分</li><li>查看 Response 或者 Preview，你会看到响应的第 4 部分</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP请求和响应初探&quot;&gt;&lt;a href=&quot;#HTTP请求和响应初探&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求和响应初探&quot;&gt;&lt;/a&gt;HTTP请求和响应初探&lt;/h1&gt;&lt;p&gt;HTTP协议作为前端开发者必须掌握的知识点，它的作用就是知道浏览器和
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
