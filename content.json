{"meta":{"title":"欧阳帆","subtitle":null,"description":"kaka的博客","author":"kaka","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"VSCode前端开发插件配置","slug":"VSCode前端开发插件配置","date":"2019-05-19T02:38:13.000Z","updated":"2019-05-19T02:40:52.985Z","comments":true,"path":"2019/05/19/VSCode前端开发插件配置/","link":"","permalink":"http://yoursite.com/2019/05/19/VSCode前端开发插件配置/","excerpt":"","text":"VSCode前端开发插件配置作为前端开发人员，拥有一款适合自己的编辑器无异于如虎添翼，之前经常使用SumlimeText的我首次试用VSCode就有一种心动的感觉。VSCode这款免费的编辑器颜值够高，合理配置插件后也可以媲美WebStorm这种硬核的编辑器，那么你还有什么理由拒绝它呢。 每每上手新的编辑器，我都会根据自己的开发习惯把它调较到理想状态，加上熟悉编辑器各种特性，这个过程通常需要几周的时间。接下来，我就从外观配置、风格检查、编码效率、功能增强等 4 方面来侃侃怎么配置 VSCode 来提高工作幸福感。 外观配置作为前端开发者，外观当然是最先考虑的部分，从配置的角度，无非是配色、图标、字体等，俗话说萝卜白菜各有所爱，我目前的配色、图标字体如下： 配色：One Dark Pro，在VSCode Extensions中搜索One Dark Pro安装即可 图标：Material Icon Theme，给不同类型的文件配置不同的图标，非常直观； 字体：Fira Code，自从发现并开始使用 Fira Code，我就再也没多看自其它字体一眼，字体如果比较优雅，尤其是对数学运算符的处理 风格检查 保障优秀一致的代码风格是一个程序员的高尚品质，如果编辑器在编码时实时给出反馈，对开发者个人而言才是最高效的，在提交时做强制检查只是从团队的视角保证编码风格的规范性和一致性。前端工程师会书写的代码无非是：HTML、CSS、Javascript、Markdown、TypeScript、JSON，对应的 Lint 工具就显而易见： ESLint：插件式架构，有多种主流的编码风格规则集可供选择，典型的有 Airbnb、Google 等 StyleLint，同样插件式架构的样式检查工具 TSLint：编写TypeScript你会想用到它的 MarkdownLint：Markdown 如果不合法，可能在某些场合导致解析器异常，因为 Markdown 有好几套标准，在不同标准间部分语法支持可能是不兼容的； 有了风格检查，自然就会产生按配置好的风格规则做文件格式化的需求，另外推荐一款好用的格式化工具：Prettier，实际上已经是代码格式化的工具标准，支持格式化几乎所有的前端代码，并且类似于 EditorConfig 支持用文件来配置格式规则； 编码效率说到编码效率，当你感觉击键的速率已经赶不上自己的思维时就需要在编码时设置适当的快捷键，组合使用智能建议、代码片段、自动补全来达到速度的最大化。重点说说代码片段和自动补全两个效率提升利器。代码片段英文叫做 Snippets，市面上主流的编辑器也都支持，其基本思想就是把常见的代码模式抽出来，通过 2~3 个键就能展开 N 行代码，代码片段的积累一方面是根据个人习惯，另一方面是学习社区里面积累出来的好的编码模式，如果觉得不适合你，可以改（找个现有的插件依葫芦画瓢） 常用的代码片段插件 HTML Snippets，各种 HTML 标签片段，如果你 Emmet 玩的熟，完全可以忽略这个 Javascript (ES6) Code Snippets，常用的类声明、ES 模块声明、CMD 模块导入等，支持的缩写不下 20 种 Javascript Patterns Snippets，常见的编码模式，比如 IIFE；自动补全自动补全本质上和代码片段类似，不过是在特殊场合下以你的键入做为启发式信息提供最有可能要输入的建议 常用的自动补全工具 Auto Close Tag，适用于 JSX、Vue、HTML，在打开标签并且键入 &lt;/ 的时候，能自动补全要闭合的标签； Auto Rename Tag，适用于 JSX、Vue、HTML，在修改标签名时，能在你修改开始（结束）标签的时候修改对应的结束（开始）标签，帮你减少 50% 的击键 Path Intellisense，文件路径补全，在你用任何方式引入文件系统中的路径时提供智能提示和自动完成；NPM Intellisense，NPM 依赖补全，在你引入任何 node_modules 里面的依赖包时提供智能提示和自动完成 IntelliSense for CSS class names，CSS 类名补全，会自动扫描整个项目里面的 CSS 类名并在你输入类名时做智能提示 Emmet，以前叫做 Zen Coding，我发现后，也是爱不释手，可以把类 CSS 选择符的字符串展开成 HTML 标签，VSCode 已经内置，官方介绍文档参见，你需要做的就是熟悉他的语法，并勤加练习 TODO Highlight维护时间稍长的代码仓库免不了会有各种 TODO、FIXME、HACK 之类的标记，TODO Highlight 能够帮我们把这些关键词高亮出来，在你翻阅代码时非常醒目，就像是在大声提醒你尽快把他解决掉。支持自定义配置需要高亮的关键词，实际使用比较坑的地方是，TODO、FIXME 之类的后面必须加上冒号，否则无法高亮。 功能增强在效率提升方面除了上面的代码片段、自动补全之外，我还安装了下面几个插件，方便快速的浏览和理解代码，并且在不同项目之间切换。 Color Highlight，识别代码中的颜色，包括各种颜色格式； Bracket Pair Colorizer，识别代码中的各种括号，并且标记上不同的颜色，方便你扫视到匹配的括号，在括号使用非常多的情况下能环节眼部压力，编辑器快捷键固然好用，但是在临近嵌套多的情况下却有些力不从心； Project Manager，项目管理，让我们方便的在命令面板中切换项目文件夹，当然，你也可以直接打开包含多个项目的父级文件夹，但这样可能会让 VSCode 变慢； 不同设备同步VSCode配置Settings SyncSettings Sync 基于 Gist 实现 VSCode 用户配置、快捷键配置、已安装插件列表等的备份和恢复功能，配置过程有详细精确的操作步骤文档。生成的备份 Gist 默认是私密的，如果你想设置为共享的，也可以一键切换。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[{"name":"VSCode","slug":"VSCode","permalink":"http://yoursite.com/tags/VSCode/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}]},{"title":"CSS进阶笔记","slug":"CSS进阶笔记","date":"2019-05-19T00:49:29.000Z","updated":"2019-05-19T05:11:12.031Z","comments":true,"path":"2019/05/19/CSS进阶笔记/","link":"","permalink":"http://yoursite.com/2019/05/19/CSS进阶笔记/","excerpt":"","text":"标准流Normal Flow水平居中块级元素 宽度固定： 1234div&#123; margin-left: auto; margin-right: auto;&#125; 宽度不固定： 1234div&#123; margin-left: 20px; margin-right: 20px;&#125; 内联元素设置内联元素的父元素text-align属性： 123.parent&#123; text-align: center;&#125; 垂直居中不兼容IE时，可以使用flex布局简单实现： 1234div&#123; display: flex; align-items: center;&#125; 兼容IE时，可以使用table布局 文字溢出省略 单行文字溢出省略： 12345p&#123; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;&#125; 多行文字溢出省略： 123456p&#123; display: -webkit-box; -webkit-line-clamp: 2; /*在这里设置行数*/ -webkit-box-orient: vertical; overflow: hidden;&#125; 盒模型盒模型分类：W3C标准盒模型和IE盒模型 盒模型分为W3C标准盒模型和IE盒模型。在ie8+浏览器中使用哪个盒模型可以由box-sizing(CSS新增的属性)控制，默认值为content-box，即标准盒模型；如果将box-sizing设为border-box则用的是IE盒模型。如果在ie6,7,8中DOCTYPE缺失会触发IE模式。在当前W3C标准中盒模型是可以通过box-sizing自由的进行切换的。 W3C标准盒模型：属性width和height只包含content,不包含padding和border IE盒模型：属性width,height包含border和padding，指的是content+padding+border。 调试方法要学会使用border进行CSS的调试，可以说不会border调试方法就不要写CSS啦~.~ 实现一个宽度自适应的1:1的div123div&#123; padding-top: 100%;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]},{"title":"CSS学习笔记","slug":"CSS学习笔记","date":"2019-05-09T12:21:25.000Z","updated":"2019-05-19T00:53:38.247Z","comments":true,"path":"2019/05/09/CSS学习笔记/","link":"","permalink":"http://yoursite.com/2019/05/09/CSS学习笔记/","excerpt":"","text":"CSS学习笔记导航栏的CSS简单实现利用css可以将垂直展示的ul,ol列表转变为水平展示的导航栏html代码： 123456789&lt;ul class=&quot;clearfix&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;关于&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;技能&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;作品&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;博客&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;日历&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;联系方式&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;其他&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; css代码1234567891011clearfix::after&#123; content:&quot;&quot;; display:block; clear:both;&#125;li &#123;float: left;margin-left: 17px;margin-right: 17px;&#125; 可以记住口诀：子元素加float属性，父元素使用clearfix 高度是由什么决定的块级元素块级元素相对简单，高度是由其内部文档流高度总和决定的。那么什么是文档流呢？文档流即是文档内的元素流动方向。内联元素是从左往右流动的，当宽度不足时，自动换行。块级元素是从上往下流动的。 内联元素内联元素相对复杂，其中font-size的问题最为经典，font-size的值指字体最低的部分到字体最高部分的距离，而为了展示效果，默认行高根据不同字体有所差异。我们也可以通过line-height属性来设置建议行高，然后只有在字体大小较小时，line-height才生效。 css画一个三角形html代码：1&lt;div class=&quot;triangle&quot;&gt;&lt;/div&gt; css代码：123456.triangle&#123; width:0; border:20px solid transparent; border-top-width:0; border-left-color:blue;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]},{"title":"HTTP常用标签","slug":"HTTP常用标签","date":"2019-05-08T15:03:57.000Z","updated":"2019-05-19T00:53:44.332Z","comments":true,"path":"2019/05/08/HTTP常用标签/","link":"","permalink":"http://yoursite.com/2019/05/08/HTTP常用标签/","excerpt":"","text":"HTML常用标签HTML 常用标签iframe标签HTML内联框架元素 iframe表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中。 属性 frameborder 取值为1时（默认值），告诉浏览器在当前iframe与其他iframe之间绘制边框，取0时则无需绘制此边框。默认的比较丑，一般取0。 height 以CSS像素格式指定frame的高度。 width 以CSS像素格式或以百分比格式指定frame的宽度。 name 嵌入的浏览上下文（框架）的名称。该名称可以用作标签a，form的target属性值，或者标签input，button的formtaget属性值。 src 嵌套页面的URL地址。使用遵守同源策略的 ‘about:blank’ 来嵌套空白页。 a标签HTML 元素 (或锚元素) 可以创建一个到其他网页、文件、同一页面内的位置、电子邮件地址或任何其他URL的超链接。 属性 download 此属性指示浏览器下载URL或者文件而不是导航到它，因此将提示用户将其保存为本地文件。此属性仅使用于**同源URL**, 如果不是同源(同域), 将会导航到该URL, 例如: &lt;a href=&quot;http://127.0.0.1:8080/index.html&quot; download=&quot;index&quot;&gt;下载&lt;/a&gt; 会下载同源的一个index.html &lt;a href=&quot;http://qq.com&quot; download=&quot;qq&quot;&gt;下载&lt;/a&gt;, download无效, 将导航到qq.com target: 该属性指定在何处显示链接的资源。 取值为标签（tab），窗口（window），或框架（iframe）等浏览上下文的名称或其他关键词。 target=&quot;_self&quot;: 当前页面加载, 如果没有指定此属性的话, 该值是默认值. target=&quot;_blank&quot;: 新窗口打开 target=&quot;_parent&quot;: 会加载到当前页面的父页面, 如果没有父页面,则等同于_self targe=&quot;_top&quot;: 会加载到最顶层页面, 祖先级页面, 当index1.html包含index2.html, index2.html包含index3.html, 则index3.html中的跳转则会加载到index1.html上 href 包含超链接指向的URL或URL片段。 &lt;a href=&quot;qq.com&quot;&gt;QQ&lt;/a&gt;:,点击QQ不会跳转到qq.com 会把qq.com当成文件, 不是以.com为后缀就是网址,也可以是文件 &lt;a href=&quot;//qq.com&quot;&gt;QQ&lt;/a&gt;, 不写协议的时候, 无协议绝对地址, 默认是当前页面协议, 是file协议, 就跳转file://qq.com, 是HTTP协议, 就跳转到http://qq.com &lt;a href=&quot;xxx.html&quot;&gt;xxx&lt;/a&gt;, 相对路径, 路径只会以目录为参考, 如果在index.html中跳转, 并不会以index.html为前缀index.html/xxx.html, 会显示xxx.html &lt;a href=&quot;#1&quot;&gt;1ink&lt;/a&gt;, 写锚点, 会自动加到后面, 不会发起请求, index.html#1, 虽然不会发起请求,但是页面会有变化. &lt;a href=&quot;?name=xxx&quot;&gt;query&lt;/a&gt;, 写参数, 会自动加到后面, 并发起GET请求, index.html?name=xxx &lt;a href=&quot;javascript: alert(1)&quot;&gt;js&lt;/a&gt;, 伪协议, 会执行js代码. &lt;a href=&quot;javascript:;&quot;&gt;js&lt;/a&gt;, 伪协议, 使其标签点击而不做任何动作，可以实现某些奇葩需求 &lt;a href=&quot;&quot;&gt;blank&lt;/a&gt;, 什么也不写, 页面会刷新, 跳转到了自己. name 和iframe配合使用 form标签HTML元素 表示了文档中的一个区域，这个区域包含有交互控制元件，用来向web服务器提交信息。 a标签和form标签都是跳转, 区别就是a标签发起的是GET请求, form标签发起的是POST请求. 属性 action提交(POST)数据所到的地方.action=&quot;users&quot;, 就是提交到users, 一个处理这个form信息的程序所在的URL.method浏览器使用这种指定方式来提交 form, GET一般不用写, 如果是GET, 提交的数据会被作为查询参数, 并不会放到第四部分作为formdata, POST会把提交的数据放到formdata里, 如果要给POST加查询参数, 可以通过给URL加查询参数?query=xxx target和a标签相同nameHTML5中，一个文档中的多个form当中，name必须唯一而不仅仅是一个空字符串. 也可以与iframe标签配合使用. 如果form标签没有提交按钮, 则无法提交, html里只有form标签能提交数据，提交按钮可以是有一个 input type=submit 的元素或者有一个 button 元素，button 的 type 属性为空 input标签HTML input 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据。使用input标签提交数据, 必须有name属性. 属性 type 要呈现的控件类型 type=&quot;button&quot;: 普通按钮 type=&quot;checkbox&quot;: 复选框。必须使用 value 属性定义此控件被提交时的值 color： 用于指定颜色的控件。 date：用于输入日期的控件（年，月，日，不包括时间）。 datetime：基于 UTC 时区的日期时间输入控件（时，分，秒及几分之一秒）。 datetime-local：用于输入日期时间控件，不包含时区。 email：用于编辑 e-mail 的字段。 合适的时候可以使用 file：此控件可以让用户选择文件。使用 accept 属性可以定义控件可以选择的文件类型。 hidden：不显示在页面上的控件，但它的值会被提交到服务器。 image：图片提交按钮。必须使用 src 属性定义图片的来源及使用 alt 定义替代文本。还可以使用 height 和 width 属性以像素为单位定义图片的大小。 month：用于输入年月的控件，不带时区。 number:用于输入浮点数的控件。 password：一个值被遮盖的单行文本字段。使用 maxlength 指定可以输入的值的最大长度 。 radio：单选按钮。必须使用 value 属性定义此控件被提交时的值。使用checked 必须指示控件是否缺省被选择。在同一个”单选按钮组“中，所有单选按钮的 name 属性使用同一个值； 一个单选按钮组中是，同一时间只有一个单选按钮可以被选择。 reset：用于将表单所内容设置为缺省值的按钮。 search：用于输入搜索字符串的单行文本字段。换行会被从输入的值中自动移除。 submit：用于提交表单的按钮。 tel： 用于输入电话号码的控件；换行会被自动从输入的值中移除A，但不会执行其他语法。可以使用属性，比如 pattern 和 maxlength 来约束控件输入的值。恰当的时候，可以应用 text：单行字段；换行会将自动从输入的值中移除。 time：用于输入不含时区的时间控件。 url：用于编辑URL的字段。 The user may enter a blank or invalid address. 换行会被自动从输入值中移队。可以使用如：pattern 和 maxlength 样的属性来约束输入的值。 恰当的时候使可以应用 week：用于输入一个由星期-年组成的日期，日期不包括时区。 autocomplete这个属性表示这个控件的值是否可被浏览器自动填充。如果type属性的值是hidden、checkbox、radio、file，或为按钮类型（button、submit、reset、image），则本属性被忽略。 autofocus这个布尔属性允许您指定的表单控件在页面加载时具有焦点（自动获得焦点），除非用户将其覆盖，例如通过键入不同的控件。文档中只有一个表单元素可以具有autofocus属性，它是一个布尔值。 如果type属性设置为隐藏则不能应用（即您不能自动获得焦点的属性设置为隐藏的控件）。 disabled这个布尔属性表示此表单控件不可用。 特别是在禁用的控件中， click 事件 [将不会被分发]。 并且，禁用的控件的值在提交表单时也不会被提交。如果 type 属性为 hidden，此属性将被忽略。 小Tips:可以使用将input元素嵌入到label元素中达到点击文本时自动将焦点移动到input上元素上 button标签HTML button 元素表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方 input和button区别: 是否是空元素, button有子元素, input没有 属性 typebutton的类型 submit: 此按钮将表单数据提交给服务器。如果未指定属性，或者属性动态更改为空值或无效值，则此值为默认值。 reset: 此按钮重置所有组件为初始值。 button: 此按钮没有默认行为。它可以有与元素事件相关的客户端脚本，当事件出现时可触发。 menu: 此按钮打开一个由指定元素进行定义的弹出菜单。 namebutton的名称，与表单数据一起提交。 valuebutton的初始值。它定义的值与表单数据的提交按钮相关联。当表单中的数据被提交时，这个值便以参数的形式被递送至服务器。","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]},{"title":"HTTP请求和响应初探","slug":"HTTP请求和响应初探","date":"2019-05-04T13:23:27.000Z","updated":"2019-05-19T00:53:49.797Z","comments":true,"path":"2019/05/04/HTTP请求和响应初探/","link":"","permalink":"http://yoursite.com/2019/05/04/HTTP请求和响应初探/","excerpt":"","text":"HTTP请求和响应初探HTTP协议作为前端开发者必须掌握的知识点，它的作用就是知道浏览器和服务器如何进行沟通。下面我们就分别用命令行和Chrome开发者工具来初步探索HTTP请求和响应的内容。 HTTP请求使用命令行curl命令请求示例在命令行中输入如下命令： 1curl -s -v -H \"User: xxx\" -- \"https://www.baidu.com\" 简单分析一下我们创造的命令，curl用来创造一个请求，-s是-silent的缩写，表示不显示进度条和错误信息，-v是-verbose的缩写，常用于debug时候查找详细信息，-H “User: xxx”表示自定义一个header。接下来我们关注一下命令行显示的请求内容为： 12345GET / HTTP/1.1Host: www.baidu.comUser-Agent: curl/7.63.0Accept: */*User: xxx 然后我们把请求的方式变成POST，在命令行中输入如下命令： 1curl -X POST -s -v -H \"User: xxx\" -- \"https://www.baidu.com\" 得到的请求内容为： 12345POST / HTTP/1.1Host: www.baidu.comUser-Agent: curl/7.63.0Accept: */*User: xxx ​ 我们继续在POST请求的基础上加入-d data内容： 1curl -X POST -d \"1234567890\" -s -v -H \"User: xxx\" -- \"https://www.baidu.com\" 得到的请求内容为： 123456789POST / HTTP/1.1Host: www.baidu.comUser-Agent: curl/7.63.0Accept: */*User: xxxContent-Length: 10Content-Type: application/x-www-form-urlencoded1234567890 ​ ` 使用Chrome开发者工具查看请求内容 打开chrome,按F12，点击Network 输入网址https://www.baidu.com/ 选中第一个响应 查看 Request Headers，点击「view source」，会看到如下图所示的请求内容 请求的格式我们已经通过curl命令和Chorme开发者工具两种方式看到了HTTP的请求内容，下面我们总结一下HTTP请求的格式 1234567891 动词 路径 协议/版本2 Key1: value12 Key2: value22 Key3: value32 Content-Type: application/x-www-form-urlencoded2 Host: www.baidu.com2 User-Agent: curl/7.54.03 4 要上传的数据 请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空） 第三部分永远都是一个回车（\\n） 动词有 GET POST PUT PATCH DELETE HEAD OPTIONS 等 这里的路径包括「查询参数」，但不包括「锚点」 如果你没有写路径，那么路径默认为 / 第 2 部分中的 Content-Type 标注了第 4 部分的格式 第3部分只是一个空行，目的是为了区分第2部分和第4部分要上传的数据 HTTP响应请求了之后，应该都能得到一个响应，除非断网了，或者服务器宕机了。 响应示例上面三个请求示例，前两个请求对应的响应分别为 1234567891011121314151617181920212223242526HTTP/1.1 200 OKAccept-Ranges: bytesCache-Control: private, no-cache, no-store, proxy-revalidate, no-transformConnection: Keep-AliveContent-Length: 2443Content-Type: text/htmlDate: Tue, 10 Oct 2017 09:14:05 GMTEtag: &quot;5886041d-98b&quot;Last-Modified: Mon, 23 Jan 2017 13:24:45 GMTPragma: no-cacheServer: bfe/1.0.8.18Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt; 后面太长，省略了……HTTP/1.1 302 FoundConnection: Keep-AliveContent-Length: 17931Content-Type: text/htmlDate: Tue, 10 Oct 2017 09:19:47 GMTEtag: &quot;54d9749e-460b&quot;Server: bfe/1.0.8.18&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; 后面太长，省略了…… GET 请求和 POST 请求对应的响应可以一样，也可以不一样 响应的第四部分可以很长很长很长 响应的格式12345671 协议/版本号 状态码 状态解释2 Key1: value12 Key2: value22 Content-Length: 179312 Content-Type: text/html34 要下载的内容 状态码要背，是服务器对浏览器说的话 1xx 不常用 2xx 表示成功 3xx 表示滚吧 4xx 表示你丫错了 5xx 表示好吧，我错了 状态解释没什么用 第 2 部分中的 Content-Type 标注了第 4 部分的格式 第 2 部分中的 Content-Type 遵循 MIME 规范 用 Chrome 查看响应 打开 Network 输入网址 选中第一个响应 查看 Response Headers，点击「view source」 你会看到响应的前两部分 查看 Response 或者 Preview，你会看到响应的第 4 部分","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]}]}