{"meta":{"title":"欧阳帆","subtitle":null,"description":"kaka的博客","author":"kaka","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"HTTP常用标签","slug":"HTTP常用标签","date":"2019-05-08T15:03:57.000Z","updated":"2019-05-08T15:03:57.868Z","comments":true,"path":"2019/05/08/HTTP常用标签/","link":"","permalink":"http://yoursite.com/2019/05/08/HTTP常用标签/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"HTTP请求和响应初探","slug":"HTTP请求和响应初探","date":"2019-05-04T13:23:27.000Z","updated":"2019-05-04T13:25:24.218Z","comments":true,"path":"2019/05/04/HTTP请求和响应初探/","link":"","permalink":"http://yoursite.com/2019/05/04/HTTP请求和响应初探/","excerpt":"","text":"HTTP请求和响应初探HTTP协议作为前端开发者必须掌握的知识点，它的作用就是知道浏览器和服务器如何进行沟通。下面我们就分别用命令行和Chrome开发者工具来初步探索HTTP请求和响应的内容。 HTTP请求使用命令行curl命令请求示例在命令行中输入如下命令： 1curl -s -v -H \"User: xxx\" -- \"https://www.baidu.com\" 简单分析一下我们创造的命令，curl用来创造一个请求，-s是-silent的缩写，表示不显示进度条和错误信息，-v是-verbose的缩写，常用于debug时候查找详细信息，-H “User: xxx”表示自定义一个header。接下来我们关注一下命令行显示的请求内容为： 12345GET / HTTP/1.1Host: www.baidu.comUser-Agent: curl/7.63.0Accept: */*User: xxx 然后我们把请求的方式变成POST，在命令行中输入如下命令： 1curl -X POST -s -v -H \"User: xxx\" -- \"https://www.baidu.com\" 得到的请求内容为： 12345POST / HTTP/1.1Host: www.baidu.comUser-Agent: curl/7.63.0Accept: */*User: xxx ​ 我们继续在POST请求的基础上加入-d data内容： 1curl -X POST -d \"1234567890\" -s -v -H \"User: xxx\" -- \"https://www.baidu.com\" 得到的请求内容为： 123456789POST / HTTP/1.1Host: www.baidu.comUser-Agent: curl/7.63.0Accept: */*User: xxxContent-Length: 10Content-Type: application/x-www-form-urlencoded1234567890 ​ ` 使用Chrome开发者工具查看请求内容 打开chrome,按F12，点击Network 输入网址https://www.baidu.com/ 选中第一个响应 查看 Request Headers，点击「view source」，会看到如下图所示的请求内容 请求的格式我们已经通过curl命令和Chorme开发者工具两种方式看到了HTTP的请求内容，下面我们总结一下HTTP请求的格式 1234567891 动词 路径 协议/版本2 Key1: value12 Key2: value22 Key3: value32 Content-Type: application/x-www-form-urlencoded2 Host: www.baidu.com2 User-Agent: curl/7.54.03 4 要上传的数据 请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空） 第三部分永远都是一个回车（\\n） 动词有 GET POST PUT PATCH DELETE HEAD OPTIONS 等 这里的路径包括「查询参数」，但不包括「锚点」 如果你没有写路径，那么路径默认为 / 第 2 部分中的 Content-Type 标注了第 4 部分的格式 第3部分只是一个空行，目的是为了区分第2部分和第4部分要上传的数据 HTTP响应请求了之后，应该都能得到一个响应，除非断网了，或者服务器宕机了。 响应示例上面三个请求示例，前两个请求对应的响应分别为 1234567891011121314151617181920212223242526HTTP/1.1 200 OKAccept-Ranges: bytesCache-Control: private, no-cache, no-store, proxy-revalidate, no-transformConnection: Keep-AliveContent-Length: 2443Content-Type: text/htmlDate: Tue, 10 Oct 2017 09:14:05 GMTEtag: &quot;5886041d-98b&quot;Last-Modified: Mon, 23 Jan 2017 13:24:45 GMTPragma: no-cacheServer: bfe/1.0.8.18Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt; 后面太长，省略了……HTTP/1.1 302 FoundConnection: Keep-AliveContent-Length: 17931Content-Type: text/htmlDate: Tue, 10 Oct 2017 09:19:47 GMTEtag: &quot;54d9749e-460b&quot;Server: bfe/1.0.8.18&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; 后面太长，省略了…… GET 请求和 POST 请求对应的响应可以一样，也可以不一样 响应的第四部分可以很长很长很长 响应的格式12345671 协议/版本号 状态码 状态解释2 Key1: value12 Key2: value22 Content-Length: 179312 Content-Type: text/html34 要下载的内容 状态码要背，是服务器对浏览器说的话 1xx 不常用 2xx 表示成功 3xx 表示滚吧 4xx 表示你丫错了 5xx 表示好吧，我错了 状态解释没什么用 第 2 部分中的 Content-Type 标注了第 4 部分的格式 第 2 部分中的 Content-Type 遵循 MIME 规范 用 Chrome 查看响应 打开 Network 输入网址 选中第一个响应 查看 Response Headers，点击「view source」 你会看到响应的前两部分 查看 Response 或者 Preview，你会看到响应的第 4 部分","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"}],"keywords":[]},{"title":"生活已经那么多不如意，何苦还要去游戏中添堵呢","slug":"生活已经那么多不如意，何苦还要去游戏中添堵呢","date":"2019-04-20T14:54:51.000Z","updated":"2019-04-20T15:02:06.918Z","comments":true,"path":"2019/04/20/生活已经那么多不如意，何苦还要去游戏中添堵呢/","link":"","permalink":"http://yoursite.com/2019/04/20/生活已经那么多不如意，何苦还要去游戏中添堵呢/","excerpt":"","text":"生活已经那么多不如意，何苦还要在游戏中添堵呢，不如去读万卷书，行万里路。去和家人多呆一会，去和朋友多交流一些，走出去吧","categories":[],"tags":[{"name":"心绪来潮","slug":"心绪来潮","permalink":"http://yoursite.com/tags/心绪来潮/"}],"keywords":[]},{"title":"2019了，该做点什么了","slug":"2019了，该做点什么了","date":"2019-02-07T05:32:31.000Z","updated":"2019-02-07T05:44:05.844Z","comments":true,"path":"2019/02/07/2019了，该做点什么了/","link":"","permalink":"http://yoursite.com/2019/02/07/2019了，该做点什么了/","excerpt":"","text":"转眼2019了，年华易逝，珍惜当下，该做点什么了，就从新建第一个博客开始吧 新年计划巩固基础基础中的基础掌握 Java。经典的《Java 核心技术：卷1 基础知识》(或者《Java 编程思想》)必看，跳过其中的图形和 applet 章节。习惯通过 Java API Doc。为了保证代码的质量，《Effective Java》、《Clean Code》和《重构》也需要至少通读一遍。 熟悉 Linux 开发环境和 bash shell。Linux 是我们的开发和部署环境，你最好尽快熟练它。Linux 的基本使用可以通过《鸟哥的Linux私房菜：基础学习篇（第三版）》学习，开发 bash shell 脚本可以参考《Linux Shell脚本攻略》。 掌握开发工具，熟练使用一种 IDE。Intellij IDEA或者 Eclipse 都可以，推荐使用前者。至少熟悉常用的快捷键，会 debug(包括远程 debug)项目。 熟悉一种编辑器。比如 Vim/Emacs，至少学会搜索/替换/代码补全。 掌握 JDK 以外的常用类库和工具包。JDK 原生 API 在很多场景下使用并不方便。你需要掌握社区贡献的优秀类库和工具包，比如 apache commons、google guava 等，具体可以翻阅《技术选型手册》的Utility 篇。 掌握 Web 开发框架。我们使用 Spring(或Rose) + Ibatis(或Jade) 开发 web 服务，你需要熟练掌握它们。 学习代码规范。我们大致上遵循 oracle 的 Java 语言编码规范，你可以先阅读并熟悉它。Code Formatting 文件在 git@git.x.xx.com:xiaomi-commons/coding-standard.git，在编写代码之前，请把它导入到 IDE 中。另外，确认 IDE 已经安装 Findbugs 和 CheckStyle 插件。 熟悉开发流程。我们的开发流程大致如下：功能开发-&gt;单元测试-&gt;功能测试-&gt;Code Review-&gt;集成测试-&gt;发布。确保你熟悉其中的每个环节。 其他。需要熟练使用版本控制工具 Git（阅读：《Git 权威指南》），以及项目构建工具 Maven（阅读：《Maven实战》）。另外，在这个阶段可以尝试 TDD 开发。 进阶目标：独立负责某个服务端项目。 技能： 掌握 web 开发最佳实践，掌握 Restful API 设计，理解 Spring 原理。推荐阅读《Spring 揭秘》。掌握项目分层、子模块划分。推荐阅读：《J2EE 核心模式》。 掌握 web 架构设计。包括 Http 反向代理，数据缓存，负载均衡，水平扩展和垂直扩展。推荐阅读：《分布式Java应用：基础与实践》。 掌握关系型数据库。包括设计 MySQL 表结构，根据业务特点分表分库，基于执行计划的 SQL 分析优化，以及数据库容量规划。推荐阅读：《MySQL 必知必会》、《高性能 MySQL》。 了解 NoSQL。我们大规模使用 Hadoop、HBase、Hive，同时部分项目使用 Redis、Storm。你需要学会这些工具最基本的使用。 掌握 Http(推荐阅读：《图解 Http》、《Http 权威指南》)、Thrift 等协议。 掌握服务容量规划，性能调优，可靠性保证，以及故障处理。学习容量规划和性能调优知识，梳理业务监控点，熟练使用我们的监控报警系统。推荐阅读：《深入理解 Java 虚拟机》。 其他。设计模式：从项目中学习，有时间可以看看《深入浅出设计模式》、《JDK 里的设计模式》。学习Java Socket 编程与多线程知识，可以看看《Java 并发编程实战》，并翻翻并发编程网的文章。 深入目标：分布式系统和中间件开发。 构建知识体系：《大型网站系统与 Java 中间件实践》、《大型网站技术架构：核心原理与案例分析》。 原理与设计：《大规模存储式系统》、《UNIX 网络编程 卷1:套接字联网 API》、《How Tomcat Works》。 学习开源项目：Apache Thrift、Zipkin、Netty、Rose、Jade、淘宝 RPC 系统 Dubbo 等。分析项目中的设计思路。比如，同样是RPC框架，Finagle 和 Dubbo 有什么异同。 其他。根据参与的项目加深学习吧。比如，如果需要写 DSL，可以读一下《领域特定语言》，对 Redis 感兴趣推荐读一下：《Redis 设计与实现》。有两本书，无论做什么项目，都推荐读：《Unix 编程艺术》、《UNIX 环境高级编程(第3版)》。 健身每天至少1万步，目标75Kg 拒绝熬夜12点前入睡","categories":[],"tags":[],"keywords":[]}]}